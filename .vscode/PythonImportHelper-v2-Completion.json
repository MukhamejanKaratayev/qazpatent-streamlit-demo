[
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "streamlit.components.v1",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit.components.v1",
        "description": "streamlit.components.v1",
        "detail": "streamlit.components.v1",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "clip_client",
        "description": "clip_client",
        "isExtraImport": true,
        "detail": "clip_client",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "faiss",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "faiss",
        "description": "faiss",
        "detail": "faiss",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "delete_files_dir",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def delete_files_dir(dir):\n    st.session_state['search'] = False\n    for f in Path(dir).glob(\"*\"):\n        if f.is_file():\n            f.unlink()\n# @st.cache(allow_output_mutation=True)\ndef get_all_files(dir, carousel):\n    listOfFiles = []\n    for (dirpath, dirnames, filenames) in os.walk(dir):\n        if carousel:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_all_files",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_all_files(dir, carousel):\n    listOfFiles = []\n    for (dirpath, dirnames, filenames) in os.walk(dir):\n        if carousel:\n            listOfFiles += [os.path.join(dirpath.replace('frontend/public/', ''), file)\n                            for file in filenames]\n        else:\n            listOfFiles += [os.path.join(dirpath, file)\n                            for file in filenames]\n    return listOfFiles",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_config",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_config():\n    index = faiss.read_index(\"index/test2.index\")\n    res = faiss.StandardGpuResources()\n    index = faiss.index_cpu_to_gpu(res, 0, index)\n    client = Client('grpc://0.0.0.0:51000')\n    listOfFiles = get_all_files('frontend/public/dataset/Logos', False)\n    return index, client, listOfFiles\n# @st.cache(allow_output_mutation=True)\ndef find_similar_imgs(c, index, img_paths, listOfFiles1):\n    encoding = c.encode(img_paths)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "find_similar_imgs",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def find_similar_imgs(c, index, img_paths, listOfFiles1):\n    encoding = c.encode(img_paths)\n    similar_vecs = index.search(encoding, 10)\n    similar_ids = similar_vecs[1][0]\n    similar_img_paths = []\n    for i in similar_ids:\n        similar_img_paths.append(listOfFiles1[i])\n    return similar_img_paths\nc3, c1, c2 = st.columns((20,1,20))\n# img_logo = Image.open('logo.png')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "st.set_page_config(page_title",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "st.set_page_config(page_title = \"QazPatent\",layout = 'wide')\ndef delete_files_dir(dir):\n    st.session_state['search'] = False\n    for f in Path(dir).glob(\"*\"):\n        if f.is_file():\n            f.unlink()\n# @st.cache(allow_output_mutation=True)\ndef get_all_files(dir, carousel):\n    listOfFiles = []\n    for (dirpath, dirnames, filenames) in os.walk(dir):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "search_btn",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "search_btn = False\nif 'search' not in st.session_state:\n    st.session_state['search'] = False\nindex, client, listOfFiles = get_config()\nindex_options = [\n    'index1'\n]\nmodel_options = [\n    'CLIP (ViT-32)',\n    'RESNET101',",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index_options",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "index_options = [\n    'index1'\n]\nmodel_options = [\n    'CLIP (ViT-32)',\n    'RESNET101',\n    'efficientnetv2_rw_t'\n]\ncol1, col2 = st.columns([1,1])\nwith col1:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "model_options",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "model_options = [\n    'CLIP (ViT-32)',\n    'RESNET101',\n    'efficientnetv2_rw_t'\n]\ncol1, col2 = st.columns([1,1])\nwith col1:\n    uploaded_files = st.file_uploader(\n        \"Загрузить картинку\", type=['png', 'jpg', 'jpeg'], accept_multiple_files=False, help=\"Hello\", on_change=delete_files_dir(\"frontend/public/uploaded\"))\n    chosed_index = st.selectbox(",
        "detail": "app",
        "documentation": {}
    }
]